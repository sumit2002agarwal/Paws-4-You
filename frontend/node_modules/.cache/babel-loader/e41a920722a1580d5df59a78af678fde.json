{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win11\\\\Desktop\\\\adopet\\\\frontend\\\\src\\\\contexts\\\\auth.js\",\n    _s = $RefreshSig$();\n\n// dependencies\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate(); // Num primeiro momento, usaremos dados fixos para o login/logout\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const recoveredUser = localStorage.getItem('user');\n\n    if (recoveredUser) {\n      setUser(JSON.parse(recoveredUser));\n    } // to avoid page loading without properly gathering the user info from localStorage, we must use a state to wait for it. When the data fetch is ended, then we set Loading to false and then we render the page (this last one is made on Routes file)\n\n\n    setLoading(false);\n  }, []);\n\n  const login = (email, password) => {\n    // creating a session api\n    const loggedUser = {\n      id: '123',\n      email\n    }; // saving user on localStorage\n\n    localStorage.setItem('user', JSON.stringify(loggedUser));\n\n    if (password === '12345aA') {\n      setUser(loggedUser);\n      navigate('/home');\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    navigate('/');\n  }; // !!user:\n  // user != null, then authenticated = true\n  // user == null, then authenticated = false\n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticated: !!user,\n      user,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n/*\r\nO contexto é como se fosse uma memória central disponível para gravar certas informações globais, por exemplo, um usuário logado.\r\nEsse contexto deverá ser importado no arquivo de rotas e deve envolver todas as rotas que precisam ter acesso aos dados desse contexto. Usaremos o localStorage para armazenar os dados.\r\n*/\n\n_s(AuthProvider, \"bMs6vkxBNdJdvAQTZITyVwx4nss=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useNavigate","AuthContext","AuthProvider","children","navigate","user","setUser","loading","setLoading","recoveredUser","localStorage","getItem","JSON","parse","login","email","password","loggedUser","id","setItem","stringify","logout","removeItem","authenticated"],"sources":["C:/Users/win11/Desktop/adopet/frontend/src/contexts/auth.js"],"sourcesContent":["// dependencies\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n\r\n    // Num primeiro momento, usaremos dados fixos para o login/logout\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const recoveredUser = localStorage.getItem('user');\r\n\r\n        if (recoveredUser) {\r\n            setUser(JSON.parse(recoveredUser));\r\n        }\r\n\r\n        // to avoid page loading without properly gathering the user info from localStorage, we must use a state to wait for it. When the data fetch is ended, then we set Loading to false and then we render the page (this last one is made on Routes file)\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = (email, password) => {\r\n       \r\n\r\n        // creating a session api\r\n        const loggedUser = {\r\n            id: '123',\r\n            email\r\n        };\r\n\r\n        // saving user on localStorage\r\n        localStorage.setItem('user', JSON.stringify(loggedUser));\r\n\r\n        if (password === '12345aA') {\r\n            setUser(loggedUser);\r\n            navigate('/home');\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n      \r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n        navigate('/');\r\n    };\r\n\r\n    // !!user:\r\n    // user != null, then authenticated = true\r\n    // user == null, then authenticated = false\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ authenticated: !!user, user, loading, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n/*\r\nO contexto é como se fosse uma memória central disponível para gravar certas informações globais, por exemplo, um usuário logado.\r\nEsse contexto deverá ser importado no arquivo de rotas e deve envolver todas as rotas que precisam ter acesso aos dados desse contexto. Usaremos o localStorage para armazenar os dados.\r\n*/"],"mappings":";;;AAAA;AACA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEP,OAAO,MAAMK,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC1C,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAD0C,CAG1C;;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMU,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAtB;;IAEA,IAAIF,aAAJ,EAAmB;MACfH,OAAO,CAACM,IAAI,CAACC,KAAL,CAAWJ,aAAX,CAAD,CAAP;IACH,CALW,CAOZ;;;IACAD,UAAU,CAAC,KAAD,CAAV;EACH,CATQ,EASN,EATM,CAAT;;EAWA,MAAMM,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;IAG/B;IACA,MAAMC,UAAU,GAAG;MACfC,EAAE,EAAE,KADW;MAEfH;IAFe,CAAnB,CAJ+B,CAS/B;;IACAL,YAAY,CAACS,OAAb,CAAqB,MAArB,EAA6BP,IAAI,CAACQ,SAAL,CAAeH,UAAf,CAA7B;;IAEA,IAAID,QAAQ,KAAK,SAAjB,EAA4B;MACxBV,OAAO,CAACW,UAAD,CAAP;MACAb,QAAQ,CAAC,OAAD,CAAR;IACH;EACJ,CAhBD;;EAkBA,MAAMiB,MAAM,GAAG,MAAM;IAEjBX,YAAY,CAACY,UAAb,CAAwB,MAAxB;IACAhB,OAAO,CAAC,IAAD,CAAP;IACAF,QAAQ,CAAC,GAAD,CAAR;EACH,CALD,CApC0C,CA2C1C;EACA;EACA;;;EAEA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAAEmB,aAAa,EAAE,CAAC,CAAClB,IAAnB;MAAyBA,IAAzB;MAA+BE,OAA/B;MAAwCO,KAAxC;MAA+CO;IAA/C,CAA7B;IAAA,UACKlB;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CApDM;AAsDP;AACA;AACA;AACA;;GAzDaD,Y;UACQF,W;;;KADRE,Y"},"metadata":{},"sourceType":"module"}