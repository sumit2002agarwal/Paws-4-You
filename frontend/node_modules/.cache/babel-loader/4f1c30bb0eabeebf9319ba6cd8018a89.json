{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win11\\\\Desktop\\\\adopet\\\\frontend\\\\src\\\\contexts\\\\auth.js\",\n    _s = $RefreshSig$();\n\n// dependencies\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate(); // Num primeiro momento, usaremos dados fixos para o login/logout\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const calllogin = async () => {\n    try {\n      const res = await fetch(\"/afterlogin\", {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\"\n      });\n      const data = await res.json();\n\n      if (!res.status === 200) {\n        const error = new Error(res.error);\n        throw error;\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    calllogin();\n    setLoading(false);\n  }, []);\n\n  const login = (email, password) => {\n    console.log('login auth', {\n      email,\n      password\n    }); // creating a session api\n\n    const loggedUser = {\n      id: '123',\n      email\n    }; // saving user on localStorage\n\n    localStorage.setItem('user', JSON.stringify(loggedUser));\n\n    if (password === '12345aA') {\n      setUser(loggedUser);\n      navigate('/home');\n    }\n  };\n\n  const logout = () => {\n    console.log('logout');\n    localStorage.removeItem('user');\n    setUser(null);\n    navigate('/');\n  }; // !!user:\n  // user != null, then authenticated = true\n  // user == null, then authenticated = false\n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticated: !!user,\n      user,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n/*\r\nO contexto é como se fosse uma memória central disponível para gravar certas informações globais, por exemplo, um usuário logado.\r\nEsse contexto deverá ser importado no arquivo de rotas e deve envolver todas as rotas que precisam ter acesso aos dados desse contexto. Usaremos o localStorage para armazenar os dados.\r\n*/\n\n_s(AuthProvider, \"bMs6vkxBNdJdvAQTZITyVwx4nss=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useNavigate","AuthContext","AuthProvider","children","navigate","user","setUser","loading","setLoading","calllogin","res","fetch","method","headers","Accept","credentials","data","json","status","error","Error","err","console","log","login","email","password","loggedUser","id","localStorage","setItem","JSON","stringify","logout","removeItem","authenticated"],"sources":["C:/Users/win11/Desktop/adopet/frontend/src/contexts/auth.js"],"sourcesContent":["// dependencies\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n\r\n    // Num primeiro momento, usaremos dados fixos para o login/logout\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n\r\n\r\n    const calllogin = async () => {\r\n        try {\r\n          const res = await fetch(\"/afterlogin\", {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            credentials: \"include\",\r\n          });\r\n          const data = await res.json();\r\n        \r\n          if (!res.status === 200) {\r\n            const error = new Error(res.error);\r\n            throw error;\r\n          }\r\n        } \r\n        catch (err) {\r\n          console.log(err);\r\n          \r\n        }\r\n      };\r\n\r\n      \r\n      useEffect(() => {\r\n        calllogin();\r\n        setLoading(false);\r\n      }, []);\r\n\r\n \r\n    const login = (email, password) => {\r\n        console.log('login auth', { email, password });\r\n\r\n        // creating a session api\r\n        const loggedUser = {\r\n            id: '123',\r\n            email\r\n        };\r\n\r\n        // saving user on localStorage\r\n        localStorage.setItem('user', JSON.stringify(loggedUser));\r\n\r\n        if (password === '12345aA') {\r\n            setUser(loggedUser);\r\n            navigate('/home');\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        console.log('logout');\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n        navigate('/');\r\n    };\r\n\r\n    // !!user:\r\n    // user != null, then authenticated = true\r\n    // user == null, then authenticated = false\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ authenticated: !!user, user, loading, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n/*\r\nO contexto é como se fosse uma memória central disponível para gravar certas informações globais, por exemplo, um usuário logado.\r\nEsse contexto deverá ser importado no arquivo de rotas e deve envolver todas as rotas que precisam ter acesso aos dados desse contexto. Usaremos o localStorage para armazenar os dados.\r\n*/"],"mappings":";;;AAAA;AACA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEP,OAAO,MAAMK,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC1C,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAD0C,CAG1C;;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;;EAKA,MAAMW,SAAS,GAAG,YAAY;IAC1B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;QACrCC,MAAM,EAAE,KAD6B;QAErCC,OAAO,EAAE;UACPC,MAAM,EAAE,kBADD;UAEP,gBAAgB;QAFT,CAF4B;QAMrCC,WAAW,EAAE;MANwB,CAAhB,CAAvB;MAQA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB;;MAEA,IAAI,CAACP,GAAG,CAACQ,MAAL,KAAgB,GAApB,EAAyB;QACvB,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUV,GAAG,CAACS,KAAd,CAAd;QACA,MAAMA,KAAN;MACD;IACF,CAfD,CAgBA,OAAOE,GAAP,EAAY;MACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IAED;EACF,CArBH;;EAwBEtB,SAAS,CAAC,MAAM;IACdU,SAAS;IACTD,UAAU,CAAC,KAAD,CAAV;EACD,CAHQ,EAGN,EAHM,CAAT;;EAMF,MAAMgB,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;IAC/BJ,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B;MAAEE,KAAF;MAASC;IAAT,CAA1B,EAD+B,CAG/B;;IACA,MAAMC,UAAU,GAAG;MACfC,EAAE,EAAE,KADW;MAEfH;IAFe,CAAnB,CAJ+B,CAS/B;;IACAI,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAA7B;;IAEA,IAAID,QAAQ,KAAK,SAAjB,EAA4B;MACxBpB,OAAO,CAACqB,UAAD,CAAP;MACAvB,QAAQ,CAAC,OAAD,CAAR;IACH;EACJ,CAhBD;;EAkBA,MAAM6B,MAAM,GAAG,MAAM;IACjBX,OAAO,CAACC,GAAR,CAAY,QAAZ;IACAM,YAAY,CAACK,UAAb,CAAwB,MAAxB;IACA5B,OAAO,CAAC,IAAD,CAAP;IACAF,QAAQ,CAAC,GAAD,CAAR;EACH,CALD,CA1D0C,CAiE1C;EACA;EACA;;;EAEA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAAE+B,aAAa,EAAE,CAAC,CAAC9B,IAAnB;MAAyBA,IAAzB;MAA+BE,OAA/B;MAAwCiB,KAAxC;MAA+CS;IAA/C,CAA7B;IAAA,UACK9B;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA1EM;AA4EP;AACA;AACA;AACA;;GA/EaD,Y;UACQF,W;;;KADRE,Y"},"metadata":{},"sourceType":"module"}