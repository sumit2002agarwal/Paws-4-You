{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win11\\\\Desktop\\\\adopet\\\\frontend\\\\src\\\\contexts\\\\auth.js\",\n    _s = $RefreshSig$();\n\n// dependencies\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate(); // Num primeiro momento, usaremos dados fixos para o login/logout\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const cookies = new Cookies();\n  const token = cookies.get(\"jwtoken\");\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const res = await fetch(\"http://localhost:5000/afterlogin\", {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        if (res.status === 401) {\n          const error = new Error(res.error);\n          throw error;\n        }\n\n        const data = await res.json();\n        setUser({\n          data\n        });\n      } catch (err) {\n        console.log(err);\n        navigate(\"/login\");\n      }\n    };\n\n    checkLoggedIn(); // to avoid page loading without properly gathering the user info from localStorage, we must use a state to wait for it. When the data fetch is ended, then we set Loading to false and then we render the page (this last one is made on Routes file)\n\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password, usertype) => {\n    console.log('login auth', {\n      email,\n      password\n    });\n    const res = await fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //credentials: 'include',\n      body: JSON.stringify({\n        email,\n        password,\n        usertype\n      })\n    });\n    const dataa = await res.json();\n    setUser(dataa);\n    console.log(dataa.token);\n    cookies.set(\"jwtoken\", dataa.token, {\n      expires: new Date(Date.now() + 25892000000),\n      //httpOnly: true,\n      path: \"/\"\n    });\n\n    if (dataa.status === 400 || !dataa || dataa.error) {\n      window.alert(\"inSuccessfull login\");\n      console.log(\"inSuccessfull login\");\n    } else {\n      console.log(usertype);\n      if (usertype == \"2\") navigate(\"/home\");else navigate(\"/adminhome\");\n      window.alert(\"Successfull login\");\n      console.log(\"Successfull login\");\n    }\n  };\n\n  const logout = () => {\n    console.log('logout');\n    localStorage.removeItem('user');\n    setUser(null);\n    navigate('/');\n  }; // !!user:\n  // user != null, then authenticated = true\n  // user == null, then authenticated = false\n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticated: !!user,\n      user,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n/*\r\nO contexto é como se fosse uma memória central disponível para gravar certas informações globais, por exemplo, um usuário logado.\r\nEsse contexto deverá ser importado no arquivo de rotas e deve envolver todas as rotas que precisam ter acesso aos dados desse contexto. Usaremos o localStorage para armazenar os dados.\r\n*/\n\n_s(AuthProvider, \"bMs6vkxBNdJdvAQTZITyVwx4nss=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useNavigate","Cookies","AuthContext","AuthProvider","children","navigate","user","setUser","loading","setLoading","cookies","token","get","checkLoggedIn","res","fetch","method","headers","Accept","Authorization","status","error","Error","data","json","err","console","log","login","email","password","usertype","body","JSON","stringify","dataa","set","expires","Date","now","path","window","alert","logout","localStorage","removeItem","authenticated"],"sources":["C:/Users/win11/Desktop/adopet/frontend/src/contexts/auth.js"],"sourcesContent":["// dependencies\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n\r\n    // Num primeiro momento, usaremos dados fixos para o login/logout\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const cookies = new Cookies();\r\n\tconst token = cookies.get(\"jwtoken\");\r\n    useEffect(() => {\r\n        const checkLoggedIn = async () => {\r\n\t\t\t\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await fetch(\"http://localhost:5000/afterlogin\", {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\theaders: {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\tif (res.status === 401) {\r\n      \r\n\t\t\t\tconst error = new Error(res.error);\r\n\t\t\t\tthrow error;\r\n\t\t\t  }\r\n\t\t\t\tconst data = await res.json();\r\n\t\t\t\t\r\n\t\t\t\tsetUser({\r\n\r\n\t\t\t\t\tdata\r\n\t\t\t\t\t});\r\n\t\t\t\t \r\n\t\t\t\t  \r\n\t\t\t\t\r\n\t\t\t  } catch (err) {\r\n\t\t\t\tconsole.log(err);\r\n                navigate(\"/login\");\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t  }\r\n\t\t};\r\n        checkLoggedIn();\r\n\r\n        // to avoid page loading without properly gathering the user info from localStorage, we must use a state to wait for it. When the data fetch is ended, then we set Loading to false and then we render the page (this last one is made on Routes file)\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async(email, password,usertype) => {\r\n        console.log('login auth', { email, password });\r\n\r\n        \r\n\r\n\r\n        const res = await fetch(\"http://localhost:5000/login\", {\r\n\t\t  method: \"POST\",\r\n\t\t  headers: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t  },\r\n\t\t  //credentials: 'include',\r\n\t\t  body: JSON.stringify({\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\tusertype\r\n\t\t  }),\r\n\t\t});\r\n\t\r\n\t\tconst dataa = await res.json();\r\n        setUser(dataa);\r\n         console.log(dataa.token);\r\n\t\t\r\n\t\t cookies.set(\"jwtoken\", dataa.token, {\r\n\t\t\texpires: new Date(Date.now() + 25892000000),\r\n\t\t\t//httpOnly: true,\r\n\t\t\tpath: \"/\",\r\n\t\t  });\r\n\t\t  \r\n\t\t  \r\n\t\tif (dataa.status === 400 || !dataa || dataa.error) {\r\n\t\t   window.alert(\"inSuccessfull login\");\r\n        console.log(\"inSuccessfull login\");\r\n\t\t\t\r\n\t\t\r\n\t\t} else {\r\n\t\t\tconsole.log(usertype);\r\n\t\t\tif(usertype==\"2\")\r\n\t\t\tnavigate(\"/home\");\r\n\t\t\telse\r\n\t\t\tnavigate(\"/adminhome\")\r\n\t\t    window.alert(\"Successfull login\");\r\n        console.log(\"Successfull login\");\r\n\t\t\r\n\t\t}\r\n\r\n\r\n\r\n    };\r\n\r\n    const logout = () => {\r\n        console.log('logout');\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n        navigate('/');\r\n    };\r\n\r\n    // !!user:\r\n    // user != null, then authenticated = true\r\n    // user == null, then authenticated = false\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ authenticated: !!user, user, loading, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n/*\r\nO contexto é como se fosse uma memória central disponível para gravar certas informações globais, por exemplo, um usuário logado.\r\nEsse contexto deverá ser importado no arquivo de rotas e deve envolver todas as rotas que precisam ter acesso aos dados desse contexto. Usaremos o localStorage para armazenar os dados.\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}